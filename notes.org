* General structure
Not sure exactly about ordering: most other HOPL papers follow a mostly
chronological organization, so I guess we could do the same?

However, HOPL 2 / Lisp has:

https://www.cs.umbc.edu/courses/331/resources/papers/Evolution-of-Lisp.pdf

- History in terms of projects and people

- Evolution of the language in technical terms

How 'bout:
1- prehistory (Mocklisp and Maclisp)
2- early history (Emacs until the big schism)
3- XEmacs
4- Emacs
Given that XEmacs's development was most active when Emacs's was most
dormant and vice-versa, this ends up being almost chronological.

* Sources
https://www.emacswiki.org/emacs/EmacsHistory
https://www.jwz.org/doc/emacs-timeline.html
https://www.jwz.org/doc/lemacs.html
http://www.multicians.org/mepap.html
https://en.wikipedia.org/wiki/Mocklisp
https://www.gnu.org/gnu/rms-lisp.en.html
* Projects and people
** Gosling Emacs/MockLisp
https://news.ycombinator.com/item?id=8727085
http://bitsavers.informatik.uni-stuttgart.de/pdf/cmu/Gosling_Unix_EMACS_Dec81.pdf

** Compiler rewrite by Jamie Zawinski / Lucid Emacs
- type opacity - keymaps, events?

** Other implementations
*** Elisp in MIT Scheme
 Edwin, there's also a paper on this:
 https://archive.org/stream/bitsavers_mitaiaimAI_794650/AITR-1451_djvu.txt
In "down with emacs lisp" you also mention JEmacs.
*** Elisp in Guile
*** Elisp in Common-Lisp (Sam Steingold?)

* Language & Implementation Overview
** ... usual stuff ...
** Buffer-local variables

** Comparison to other Lisps of the time

** Language implementation
** Interpreter
** Image dumping
** Byte-code architecture
** Bootstrap?
** C FFI
** JIT compiler attempts

* Language Evolution
** CL
** EIEIO/CLOS
** Static scope
Mention Neubauer/Sperber ICFP 2011 paper
** How 'bout evolution of typical programming style?
** frame-local variables?
** Evolution of the "core Elisp" language?
I'm thinking here of how when/unless/dolist/push/setf slowly migrated from
CL to subr.el in Emacs.
** Of course, I'd mention `pcase` in there as well
** lack of tail-call elimination?
** lack of modules?
** what about tooling?
*** docstrings (and checkdoc)
*** Edebug
*** Advice?
*** the various `declare` thingies
indent, debug, doc-string, advertized-calling-convention, ...

* Future evolution
** Multi-threading?
** OCaml extensions?
** Replacement by Scheme/Guile
** Replacement by Common Lisp
